<template>
  <div>
    <div >

      <svg id="svg2" width="500"  height="500" xmlns="http://www.w3.org/2000/svg">
        <!-- <rect x="0" y="0" width="30" height="15"
          style="stroke: #ff0000; fill: none;">
          <animateMotion
                    path="M10,50 q60,50 100,0 q60,-50 100,0"
                    begin="0s" dur="10s" repeatCount="indefinite"
                    ></animateMotion>
        </rect> -->
         <!-- <image x="0" y="0" width="30" height="15"
          style="stroke: #ff0000; fill: none;">
          <animateMotion
                    path="M10,50 q60,50 100,0 q60,-50 100,0"
                    begin="2s" dur="12s" repeatCount="indefinite"
                    ></animateMotion>
        </image> -->
      </svg>
    </div>
    
  </div>
</template>

<script>
require 
// import { SVG } from '@svgdotjs/svg.js'
export default {
  name: 'svgEdit',
  props: {
   
  },
  data(){
    return {
      setStart: null,
      img: require('../assets/logo.png'),//货物图片
      svgcanvas: null,
      id: 0,
      AnimatTtemplate:{//动画模板
        productObject: {//产品运行状态，可根据情况拓展
          path1: {
            end：10,//path1轨道中到达终点的数量
          }
          path2: {
            end: 10,//path2轨道中到达终点的数量
          }
        },
        pathObject: {
          path1: {//轨道1
            begin: 0,//ms
            dur: 4000,//ms
            path: "M10,50 q60,50 100,0 q60,-50 200,50",// path coor
            x: 10,//svg坐标
            y: 50,//svg坐标
            img: '',//product image
            pathImg: '',//path image
            toOtherPathsId: 'path2',// 下一个轨道的id
            condition:'end' //进入下一个轨道
          },
          path2: {//轨道2
            begin: 0,//ms
            dur: 2000,//ms
            path: "M100,50 l200,100 ",// path coor
            x: 200,
            y: 0,
            img: '',//product image
            pathImg: '',//path image
            toOtherPathsId: '',// when the animate ended, put the img into other path's begin position,this is the id of other path
            condition:''
          },
        },

      }
    }
  },
  mounted(){
    var o = this.AnimatTtemplate.pathObject;
    window.app=this;

    if(this.setStart !== null){
      console.log('清除')
      clearInterval(this.setStart);
    }

  //触发货物运动
    this.setStart = setInterval(()=>{
        this.addSvg(o.path1)
    },1000)
   
  },
  methods:{

    //添加货物svg
    addSvg({begin,dur,path,toOtherPathsId}){
      //begin,起始时间
      //dur 运动总时间，结束后删除元素
      //path 运动轨迹
      var o = this.AnimatTtemplate.pathObject;
      var ns = 'http://www.w3.org/2000/svg'
      var id = "product-"+ this.id;
      var svg = document.createElementNS(ns,'svg')
      var obj =document.createElementNS(ns,'image')
      svg.setAttribute( "id", id);
      obj.setAttribute( "width", 30);
      obj.setAttribute( "height", 30);
      obj.setAttribute( "x", 0);
      obj.setAttribute( "y", 0);
      // obj.setAttribute( "xlink:href",this.img);
      obj.href.baseVal = this.img;
      var animateMotion = document.createElementNS(ns,'animateMotion')
      animateMotion.setAttribute( "path", path);
      animateMotion.setAttribute( "begin", begin+'ms');
      animateMotion.setAttribute( "dur", dur + 'ms');
      animateMotion.setAttribute( "repeatCount", "0");
      // animateMotion.addEventListener( "onend", this.goToNext(o[toOtherPathsId], svg, animateMotion));
      obj.appendChild(animateMotion)
      svg.appendChild(obj)
      document.getElementById('svg2').appendChild(svg)

      setTimeout(()=>{
        // this.deleteSvg(id)
        // this.goToNext(o[toOtherPathsId],svg,animateMotion)
      },dur)

      this.id++;
    },
    //进入下一个轨道方法
    goToNext(toSvg,svg,animateMotion){
      svg.setAttribute( "x", toSvg.x);
      svg.setAttribute( "y", toSvg.y);
      animateMotion.setAttribute( "path", toSvg.path);
      // animateMotion.beginElement()
    },
    //删除svg元素
    deleteSvg(id){
      document.getElementById(id).remove();
    }
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped lang="less">

</style>
